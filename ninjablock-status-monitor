#!/usr/bin/env perl
use Cwd qw(abs_path);
use Config::Simple;
use Mojo::UserAgent;
use Mojo::JSON qw(decode_json);
use DateTime;
use DateTime::Format::Strptime;
use Email::Sender::Simple qw(sendmail);
use Email::Simple;

my ($path)      = abs_path($0) =~ m/(.*)ninjablock-status-monitor/i;
$config         = new Config::Simple("$path/config.ini") or die Config::Simple->error();

my $url         = $config->param('url');
my $passphrase  = $config->param('ninjablock-api-passphrase');

my $ua          = Mojo::UserAgent->new;
my $tx          = $ua->get( $url => { 'X-NinjaBlock-API' => $passphrase });
my $now         = DateTime->now( time_zone => 'Australia/Sydney' );

if ( my $res = $tx->success ) {
    my @locations = qw(outdoor indoor);
    my $json      = decode_json $res->body;

    for my $location ( @locations ) {
        my $latest = DateTime->from_epoch( epoch => $json->{ $location }{ latest } / 1000 )->set_time_zone( 'Australia/Sydney' );
        my $delta  = $now->delta_ms( $latest );

        if ( $delta->{ minutes } > 30 ) {
            print "$location: No updates since $latest.\n";
            my $formatter = DateTime::Format::Strptime->new( pattern => '%e %B %Y, %H:%M' );
            $latest->set_formatter( $formatter );

            my $email = Email::Simple->create(
                header => [
                    To      => 'user@example.com',
                    From    => 'ninjablock@example.com',
                    Subject => "$location: No updates since $latest.",
                ],
                body        => "Uh oh.\n", );

                sendmail ( $email );
        }
    }
}
else {
    my $err = $tx->error;
    print "Error contacting NinjaBlock: $err->{code} $err->{message}.\n";

    my $email = Email::Simple->create(
        header => [
            To      => 'user@example.com',
            From    => 'ninjablock@example.com',
            Subject => "Error contacting API: $err->{code} $err->{message}",
        ],
        body => "Uh oh.\n", );
        sendmail ( $email );
}
